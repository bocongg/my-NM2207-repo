paste(substr(word, 0,0))
# Enter code here
word_reverser <- function(word){
word_length <- nchar(word)
output <- vector("character")
pos <- 1
while (word_length > 0){
output[pos] <- paste(substr(word, word_length, word_length))
word_length <- word_length - 1
pos <- pos + 1
}
return(output)
}
word_reverser(readline("Your word:"))
knitr::opts_chunk$set(echo = TRUE)
# Enter code here
x <- 5
addition_function <- function(y){
answer <- x + y
}
addition_function(5)
# Enter code here
x <- 5
addition_function <- function(y){
x + y
}
addition_function(5)
# Enter code here
x <- 5
addition_function <- function(y){
x + y
}
addition_function(50)
?filter
#a. Read the contents of the dataset
library(tidyverse)
#a. Read the contents of the dataset
library(tidyverse)
qn9_dataset <- read_csv("gapminder.csv")
setwd("C:/Users/bcong/Desktop/Uni Materials/NM2207 Computational Media Literacy/Quiz")
qn9_dataset <- read_csv("gapminder.csv")
names(qn9_dataset)
qn9_dataset %>% select(country, continent, year)
#c. Find the number of times each country is repeated
qn9_dataset %>% group_by(country) %>% count()
qn9_dataset %>% group_by(country) %>% count()
qn9_dataset %>% filter(country == "Singapore") %>% arrange(qn9_dataset, desc(gdpPercap))
qn9_dataset %>% filter(country == "Singapore")
qn9_dataset %>% arrange(filter(country == "Singapore"), desc(gdpPercap))
qn9_dataset %>% filter(country == "Singapore") %>% arrange(desc(gdpPercap))
qn9_dataset %>% filter(country == "Singapore") %>% summarise(mean_lifeExp = mean(lifeExp))
SG_dataset <- qn9_dataset %>% filter(country == "Singapore")
SG_dataset %>% arrange(desc(gdpPercap))
SG_dataset %>% summarise(mean_lifeExp = mean(lifeExp))
ggplot(data=SG_dataset) + aes(x=year, y=pop) + geom_point() + labs(x="Year", y="Population in Singapore", title="Population of Singapore from 1952 to 2007")
ggplot(data=SG_dataset) + aes(x=year, y=pop) + geom_point() + labs(x="Year", y="Population", title="Population of Singapore from 1952 to 2007")
# Enter code here
carName <- 3
print_car_name <- function(){
names<-c("Volvo", "Mercedes", "Audi", "BMW")
carName<-names[carName]
return(carName)
}
cat("the name of the car you chose is", print_car_Name(),", but the value of the variable carName is", carName)
# Enter code here
carName <- 3
print_car_name <- function(){
names<-c("Volvo", "Mercedes", "Audi", "BMW")
carName<-names[carName]
return(carName)
}
cat("the name of the car you chose is", print_car_name(),", but the value of the variable carName is", carName)
# Enter code here
# Write a function called guessNum for a guessing game where the players must guess the value of a number stored in a variable answer,
# a. In the first step, take the user's guess as the argument
# b. In the local scope of guessNum, initialize the value of the variable answer to be 15
# c. Compare the user’s guess with the variable answer
# d. Print out an appropriate message to the console, telling them if guess was above, below, or right on the number stored in answer
# e. In the global scope, initialize the value of a variable guess to be 16. Write the function call for the guessNum function, using guess as the argument.
# Only final code is required.
guessNum <- function(guess){
answer <- 15
check <- case_when(guess > answer ~ "above the answer.",
guess < answer ~ "below the answer.",
guess == answer ~ "right!")
cat("Your guess is", check, sep = "")
}
guess <- 16
guessNum(guess)
# Enter code here
# Write a function called guessNum for a guessing game where the players must guess the value of a number stored in a variable answer,
# a. In the first step, take the user's guess as the argument
# b. In the local scope of guessNum, initialize the value of the variable answer to be 15
# c. Compare the user’s guess with the variable answer
# d. Print out an appropriate message to the console, telling them if guess was above, below, or right on the number stored in answer
# e. In the global scope, initialize the value of a variable guess to be 16. Write the function call for the guessNum function, using guess as the argument.
# Only final code is required.
guessNum <- function(guess){
answer <- 15
check <- case_when(guess > answer ~ "above the answer.",
guess < answer ~ "below the answer.",
guess == answer ~ "right!")
cat("Your guess is", check, sep = " ")
}
guess <- 16
guessNum(guess)
# Enter code here
# Write a function called guessNum for a guessing game where the players must guess the value of a number stored in a variable answer,
# a. In the first step, take the user's guess as the argument
# b. In the local scope of guessNum, initialize the value of the variable answer to be 15
# c. Compare the user’s guess with the variable answer
# d. Print out an appropriate message to the console, telling them if guess was above, below, or right on the number stored in answer
# e. In the global scope, initialize the value of a variable guess to be 16. Write the function call for the guessNum function, using guess as the argument.
# Only final code is required.
guessNum <- function(guess){
answer <- 15
check <- case_when(guess > answer ~ "above the answer.",
guess < answer ~ "below the answer.",
guess == answer ~ "right!")
cat("Your guess is", check, sep = " ")
}
guess <- 15
guessNum(guess)
# Enter code here
# Write a function called guessNum for a guessing game where the players must guess the value of a number stored in a variable answer,
# a. In the first step, take the user's guess as the argument
# b. In the local scope of guessNum, initialize the value of the variable answer to be 15
# c. Compare the user’s guess with the variable answer
# d. Print out an appropriate message to the console, telling them if guess was above, below, or right on the number stored in answer
# e. In the global scope, initialize the value of a variable guess to be 16. Write the function call for the guessNum function, using guess as the argument.
# Only final code is required.
guessNum <- function(guess){
answer <- 15
check <- case_when(guess > answer ~ "above the answer.",
guess < answer ~ "below the answer.",
guess == answer ~ "right!")
cat("Your guess is", check, sep = " ")
}
guess <- 12
guessNum(guess)
z <- 5
addition_function <- function(x, y){
z <- x + y
}
addition_function(4, 5)
z
z <- 5
addition_function <- function(x, y){
z <- x + y
}
addition_function(4, 5)
addition_function(4, 5)
z
print(z)
# initialise global variable 'z'
# z <- 5
# create a function which adds arguments that is passed to 'z'
addition_function <- function(x, y){
z <- x + y
}
# call the function, 'z' should be '9'
addition_function(4, 5)
# print value of 'z', it is not '9'
print(z)
# initialise global variable 'z'
# z <- 5
# create a function which adds arguments that is passed to 'z'
addition_function <- function(x, y){
z <- x + y
}
# call the function, 'z' should be '9'
addition_function(4, 5)
# print value of 'z', it is not '9'
print(z)
# initialise global variable 'z'
# z <- 5
# create a function which adds arguments that is passed to 'z'
addition_function <- function(x, y){
z <- x + y
return(z)
}
# call the function, 'z' should be '9'
addition_function(4, 5)
# print value of 'z', it is not '9'
print(z)
# initialise global variable 'z'
z <- 5
# create a function which adds arguments that is passed to 'z'
addition_function <- function(x, y){
z <- x + y
return(z)
}
# call the function, 'z' should be '9'
addition_function(4, 5)
# print value of 'z', it is not '9'
print(z)
# initialise global variable 'z'
z <- 5
# create a function which adds arguments that is passed to 'z'
addition_function <- function(x, y){
z <- x + y
return(z)
}
# create another function which subtracts the argument value from 'z'
subtraction_function <- function(a){
output <- z - a
return(output)
}
# call the first function, 'z' should be '9'
addition_function(4, 5)
# call the second function, 'z' should be '6'
subtraction_function(3)
# initialise global variable 'z'
z <- 5
# create a function which adds arguments that is passed to 'z'
addition_function <- function(x, y){
z <- x + y
return(z)
}
# create another function which subtracts the argument value from 'z'
subtraction_function <- function(a){
output <- z - a
return(output)
}
# call the first function
addition_function(4, 5)
# call the second function, 'output' should be '6'
subtraction_function(3)
#a. Read the contents of the dataset
library(tidyverse)
qn9_dataset <- read_csv("gapminder.csv")
#b. Select the columns, country, continent and year
qn9_dataset %>% select(country, continent, year)
#c. Find the number of times each country is repeated
qn9_dataset %>% group_by(country) %>% count()
#d. List only the rows corresponding to Singapore in the decreasing order of their gdpPercap
SG_dataset <- qn9_dataset %>% filter(country == "Singapore")
SG_dataset %>% arrange(desc(gdpPercap))
#e. Find the mean value of life expectancy of Singapore
SG_dataset %>% summarise(mean_lifeExp = mean(lifeExp))
#f. Obtain a plot of Singapore’s population from 1952 to 2007 (only code required)
ggplot(data=SG_dataset) + aes(x=year, y=pop) + geom_point() + labs(x="Year", y="Population", title="Population of Singapore from 1952 to 2007")
guessNum <- function(guess){
answer <- 15
check <- case_when(guess > answer ~ "above the answer.",
guess < answer ~ "below the answer.",
guess == answer ~ "right!")
cat("Your guess is", check, sep = " ")
}
guess <- 16
guessNum(guess)
knitr::opts_chunk$set(echo = TRUE)
# Enter code here
count <- 10
while (count > 0){
cat(count, sep = "...")
count <- count - 1
Sys.sleep(1)
}
# Enter code here
count <- 10
while (count > 0){
cat(count, "\n")
count <- count - 1
Sys.sleep(1)
}
cat("Blastoff!")
setwd("C:/Users/bcong/Desktop/Uni Materials/NM2207 Computational Media Literacy/Week 6")
# Enter code here
word_reverser <- function(word){
output <- c()
for (i in 1:nchar(word)){
output <- c(output, substr(word, i, i))
}
paste(rev(output))
}
word_reverser(readline("Your word:"))
word = "hello"
word
output <- c()
output
output <- c(output, substr(word,i,i))
output <- c(output, substr(word,1,1))
output
output <- c(output, substr(word,2,2))
output
output <- c(output, substr(word,3,3))
output
output <- c(output, substr(word,4,4))
output
output <- c(output, substr(word,5,5))
output
paste(rev(output))
paste(rev(output), collapse = "")
# Enter code here
word_reverser <- function(word){
output <- c()
for (i in 1:nchar(word)){
output <- c(output, substr(word, i, i))
}
paste(rev(output), collapse = "")
}
word_reverser(readline("Your word:"))
# Enter code here
word_reverser <- function(word){
word_length <- nchar(word)
output <- c()
pos <- 1
while (word_length > 0){
output <- c(output, (substr(word, word_length, word_length)))
word_length <- word_length - 1
pos <- pos + 1
}
paste(output, collapse = "")
}
word_reverser(readline("Your word:"))
# Enter code here
word_reverser <- function(word){
word_length <- nchar(word)
output <- c()
pos <- 1
while (word_length > 0){
output <- c(output, (substr(word, word_length, word_length)))
word_length <- word_length - 1
pos <- pos + 1
}
return(paste(output, collapse = ""))
}
word_reverser(readline("Your word:"))
# Enter code here
word_reverser <- function(word){
word_length <- nchar(word)
output <- c()
pos <- 1
while (word_length > 0){
output <- paste(output, (substr(word, word_length, word_length)))
word_length <- word_length - 1
pos <- pos + 1
}
return(output)
}
word_reverser(readline("Your word:"))
# Enter code here
word_reverser <- function(word){
output <- c()
for (i in 1:nchar(word)){
output <- c(output, substr(word, i, i))
}
paste(rev(output), collapse = "")
}
word <- readline("Your word:")
word_reverser(word)
# Enter code here
word_reverser <- function(word){
output <- c()
for (i in 1:nchar(word)){
output <- c(output, substr(word, i, i))
}
paste(rev(output), collapse = "")
}
word <- readline("Your word:")
word_reverser(word)
count <- 10
while (count > 0){
cat(count, "...")
count <- count - 1
Sys.sleep(1)
}
cat("Blastoff!")
?paste
word_reverser <- function(word){
output <- c()
for (i in 1:nchar(word)){
output <- c(output, substr(word, i, i))
}
paste(rev(output), sep = " ")
}
word <- readline("Your word:")
word <- "hello"
word_reverser(word)
word_reverser <- function(word){
output <- c()
for (i in 1:nchar(word)){
output <- c(output, substr(word, i, i))
}
paste(rev(output), sep = "")
}
word <- readline("Your word:")
word <- "hello"
word_reverser(word)
word_reverser <- function(word){
output <- c()
for (i in 1:nchar(word)){
output <- c(output, substr(word, i, i))
}
paste(rev(output), sep = "")
}
# word <- readline("Your word:")
word <- "hello"
word_reverser(word)
word_reverser <- function(word){
output <- c()
for (i in 1:nchar(word)){
output <- c(output, substr(word, i, i))
}
paste(rev(output))
}
# word <- readline("Your word:")
word <- "hello"
word_reverser(word)
word_reverser <- function(word){
output <- c()
for (i in 1:nchar(word)){
output <- c(output, substr(word, i, i))
}
paste(rev(output), collapse = "")
}
# word <- readline("Your word:")
word <- "hello"
word_reverser(word)
word_reverser <- function(word){
output <- c()
for (i in 1:nchar(word)){
output <- c(output, substr(word, i, i))
}
paste(rev(output), collapse = "", sep = " ")
}
# word <- readline("Your word:")
word <- "hello"
word_reverser(word)
word_reverser <- function(word){
output <- c()
for (i in 1:nchar(word)){
output <- c(output, substr(word, i, i))
}
paste(rev(output), sep=" ", collapse = "")
}
# word <- readline("Your word:")
word <- "hello"
word_reverser(word)
word_reverser <- function(word){
output <- c()
for (i in 1:nchar(word)){
output <- c(output, substr(word, i, i))
}
paste(rev(output), sep="1", collapse = "")
}
# word <- readline("Your word:")
word <- "hello"
word_reverser(word)
word_reverser <- function(word){
output <- ""
for (i in 1:nchar(word)){
# output <- c(output, substr(word, i, i))
char<-substr(word, i,i)
output<-paste(word,char)
}
#paste(rev(output), sep="1", collapse = "")
}
# word <- readline("Your word:")
word <- "hello"
word_reverser(word)
word_reverser <- function(word){
output <- c()
for (i in 1:nchar(word)){
output <- c(output, substr(word, i, i))
}
paste(rev(output), sep="1", collapse = "")
}
# word <- readline("Your word:")
word <- "hello"
word_reverser(word)
word_reverser <- function(word){
output <- c()
for (i in nchar(word):1){
output <- c(output, substr(word, i, i))
}
paste(output, collapse = "")
}
# word <- readline("Your word:")
word <- "hello"
word_reverser(word)
word_reverser <- function(word){
output <- c()
for (i in nchar(word):1){
output <- c(output, substr(word, i, i))
}
paste(output, sep=" ",collapse = "")
}
# word <- readline("Your word:")
word <- "hello"
word_reverser(word)
word_reverser <- function(word){
output <- c()
for (i in nchar(word):1){
output <- c(output, substr(word, i, i))
}
paste(output, collapse = "")
}
# word <- readline("Your word:")
word <- "hello"
word_reverser(word)
word_reverser <- function(word){
output <- c()
for (i in nchar(word):1){
output <- c(output, substr(word, i, i))
}
paste(output, collapse = "")
}
word <- readline("Your word:")
word <- "hello"
word_reverser(word)
