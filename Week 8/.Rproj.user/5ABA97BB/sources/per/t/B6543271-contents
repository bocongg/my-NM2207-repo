---
title: "Challenge-8"
author: "Lew Bo Cong"
date: "`r Sys.Date()`"
output:
  pdf_document: default
  html_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## The Challenge
<br>

**Explain my customisations**

I included a title ("Summary Dashboard") and a simple background information regarding the datasets by giving it a "storyline". I also made the "Summary" and "Observations" headings bold, and changed the colour of the "Update View" button to make it more obvious that the user needs to click on it to update the view. I set the default observation view number to 15.


```{r, out.height= "262px",out.width= "465px",echo=FALSE,eval=TRUE,fig.align='center',fig.cap="Screenshot of my Shiny App"}
knitr::include_graphics("C:/Users/bcong/Desktop/Uni Materials/NM2207 Computational Media Literacy/Week 8/Challenge 8 ss1.png")
```
<br>

```{r, eval=TRUE,echo=TRUE}
library(shiny)

# Define UI for dataset viewer app ----
ui <- fluidPage(
  
  # App title ----
  titlePanel("Challenge-8"),
  
  # Sidebar layout with input and output definitions ----
  sidebarLayout(
    
    # Sidebar panel for inputs ----
    sidebarPanel(
      
      # Input: Select a dataset ----
      selectInput("dataset", "Choose a dataset:",
                  choices = c("rock", "pressure", "cars")),
      
      # Input: Specify the number of observations to view ----
      numericInput("obs", "Number of observations to view:", 15),
      
      # Include clarifying text ----
      helpText("Note: while the data view will show only the specified",
               "number of observations, the summary will still be based",
               "on the full dataset."),
      
      # Input: actionButton() to defer the rendering of output ----
      # until the user explicitly clicks the button (rather than
      # doing it immediately when inputs change). This is useful if
      # the computations required to render output are inordinately
      # time-consuming.
      actionButton("update", "Update View", class = "btn-info")
      
    ),
    
    # Main panel for displaying outputs ----
    mainPanel(
      
      h1("Summary Dashboard"),
      p("What happens when a",
        strong(span("geologist", style = "color: green")),
        "is caught between a rock and a hard place while driving?"),
      em("They take observations like these below..."),
      br(),
      
      # img(src = "imagerock.jpg", height = 200),
      # img(src = "imagepressure.jpg", height = 200),
      # img(src = "imagecars.jpg", height = 200),
      
      # Output: Header + summary of distribution ----
      h4(strong("Summary")),
      imageOutput("images", height = 200),
      br(),
      verbatimTextOutput("summary"),
      
      # Output: Header + table of distribution ----
      h4(strong("Observations")),
      tableOutput("view")
    )
    
  )
)

# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
  
  # Return the requested dataset ----
  # Note that we use eventReactive() here, which depends on
  # input$update (the action button), so that the output is only
  # updated when the user clicks the button
  datasetInput <- eventReactive(input$update, {
    switch(input$dataset,
           "rock" = rock,
           "pressure" = pressure,
           "cars" = cars)
  }, ignoreNULL = FALSE)
  
  # Generate a summary of the dataset ----
  output$summary <- renderPrint({
    dataset <- datasetInput()
    summary(dataset)
  })
  
  output$images <- renderImage({
    filename <- normalizePath(file.path('./www', paste('image', input$dataset, '.jpg', sep='')))
    list(src = filename, height = 200)
  }, deleteFile = FALSE)
  
  # Show the first "n" observations ----
  # The use of isolate() is necessary because we don't want the table
  # to update whenever input$obs changes (only when the user clicks
  # the action button)
  output$view <- renderTable({
    head(datasetInput(), n = isolate(input$obs))
  })
  
}

# Create Shiny app ----
shinyApp(ui, server)
```