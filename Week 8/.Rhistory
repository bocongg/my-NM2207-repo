setwd("C:/Users/bcong/Desktop/Uni Materials/NM2207 Computational Media Literacy/Week 8")
setwd("C:/Users/bcong/Desktop/Uni Materials/NM2207 Computational Media Literacy/Week 8")
knitr::opts_chunk$set(echo = TRUE)
# Install package
install.packages("shiny")
runExample("01_hello")
library(shiny)
runExample("01_hello")
library(shiny)
runApp("app")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runExample("08_html")
runExample("04_mpg")
runExample()
runExample("02_text")
runExample("03_reactivity")
runExample("05_sliders")
runExample("06_tabsets")
runExample("07_widgets")
runExample("08_html")
runExample("08_html", display.mode = "showcase")
runExample("09_upload")
runExample("10_download")
runExample("11_timer")
runExample("06_tabsets")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runExample("07_widgets")
runExample("05_sliders")
runExample("03_reactivity")
runExample("07_widgets")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runExample("05_sliders")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
library(shiny)
# Define UI for dataset viewer app ----
ui <- fluidPage(
# App title ----
titlePanel("Challenge-8"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a dataset ----
selectInput("dataset", "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
# Input: Specify the number of observations to view ----
numericInput("obs", "Number of observations to view:", 15),
# Include clarifying text ----
helpText("Note: while the data view will show only the specified",
"number of observations, the summary will still be based",
"on the full dataset."),
# Input: actionButton() to defer the rendering of output ----
# until the user explicitly clicks the button (rather than
# doing it immediately when inputs change). This is useful if
# the computations required to render output are inordinately
# time-consuming.
actionButton("update", "Update View", class = "btn-info")
),
# Main panel for displaying outputs ----
mainPanel(
h1("Summary Dashboard"),
p("What happens when a",
strong(span("geologist", style = "color: green")),
"is caught between a rock and a hard place while driving?"),
em("They take observations like these below..."),
br(),
# img(src = "rock.jpg", height = 200),
# img(src = "pressure.jpg", height = 200),
# img(src = "cars.jpg", height = 200),
# Output: Header + summary of distribution ----
h4(strong("Summary")),
imageOutput("images", height = 200),
br(),
verbatimTextOutput("summary"),
# Output: Header + table of distribution ----
h4(strong("Observations")),
tableOutput("view")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
# Note that we use eventReactive() here, which depends on
# input$update (the action button), so that the output is only
# updated when the user clicks the button
datasetInput <- eventReactive(input$update, {
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
}, ignoreNULL = FALSE)
# Generate a summary of the dataset ----
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
output$images <- renderImage({
filename <- normalizePath(file.path('./www', paste('image', input$dataset, '.jpg', sep='')))
list(src = filename, height = 200)
}, deleteFile = FALSE)
# Show the first "n" observations ----
# The use of isolate() is necessary because we don't want the table
# to update whenever input$obs changes (only when the user clicks
# the action button)
output$view <- renderTable({
head(datasetInput(), n = isolate(input$obs))
})
}
# Create Shiny app ----
shinyApp(ui, server)
library(shiny)
# Define UI for dataset viewer app ----
ui <- fluidPage(
# App title ----
titlePanel("Challenge-8"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a dataset ----
selectInput("dataset", "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
# Input: Specify the number of observations to view ----
numericInput("obs", "Number of observations to view:", 15),
# Include clarifying text ----
helpText("Note: while the data view will show only the specified",
"number of observations, the summary will still be based",
"on the full dataset."),
# Input: actionButton() to defer the rendering of output ----
# until the user explicitly clicks the button (rather than
# doing it immediately when inputs change). This is useful if
# the computations required to render output are inordinately
# time-consuming.
actionButton("update", "Update View", class = "btn-info")
),
# Main panel for displaying outputs ----
mainPanel(
h1("Summary Dashboard"),
p("What happens when a",
strong(span("geologist", style = "color: green")),
"is caught between a rock and a hard place while driving?"),
em("They take observations like these below..."),
br(),
# img(src = "rock.jpg", height = 200),
# img(src = "pressure.jpg", height = 200),
# img(src = "cars.jpg", height = 200),
# Output: Header + summary of distribution ----
h4(strong("Summary")),
imageOutput("images", height = 200),
br(),
verbatimTextOutput("summary"),
# Output: Header + table of distribution ----
h4(strong("Observations")),
tableOutput("view")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
# Note that we use eventReactive() here, which depends on
# input$update (the action button), so that the output is only
# updated when the user clicks the button
datasetInput <- eventReactive(input$update, {
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
}, ignoreNULL = FALSE)
# Generate a summary of the dataset ----
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
output$images <- renderImage({
filename <- normalizePath(file.path('./www', paste('image', input$dataset, '.jpg', sep='')))
list(src = filename, height = 200)
}, deleteFile = FALSE)
# Show the first "n" observations ----
# The use of isolate() is necessary because we don't want the table
# to update whenever input$obs changes (only when the user clicks
# the action button)
output$view <- renderTable({
head(datasetInput(), n = isolate(input$obs))
})
}
# Create Shiny app ----
shinyApp(ui, server)
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
?datasetInput
?eventReactive
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
library(shiny)
runApp("app", display.mode = "showcase")
setwd("C:/Users/bcong/Desktop/Uni Materials/NM2207 Computational Media Literacy/Week 8")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app", display.mode = "showcase")
